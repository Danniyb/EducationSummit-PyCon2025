---
title: "Automated and Configurable Programming Project Checking with Chasten"
subtitle: "Daniel Bekele, Chi (Jaclyn) Pham, and Gregory M. Kapfhammer"
format: 
  revealjs:
    theme: default
    slide-number: true
    incremental: true
    code-fold: true
    code-tools: true
    code-link: true
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "PyCon Education Summit 2025"
    css: ../../css/styles.css
---

## The Problem with Traditional Static Analysis

### Regular expression (regex) ≠ code understanding
- Fails on structural nuance
- Hard to maintain across formatting/styles 

## The Problem with Traditional Static Analysis

### AST tools are powerful but complex
- Require managing node types
- Difficult to prototype new rules

## Chasten
A Python program that uses XPATH expressions to find patterns in the abstract syntax tree (AST) of a Python program

## What is an AST?
**Abstract Syntax Tree (AST)** = structured representation of code 

x = 1 + 2

```scss
Assign
 ├── Name(x)
 └── BinOp(+)
      ├── Constant(1)
      └── Constant(2)
```

## Why XPATH?
- ✅ Perfect for navigating ASTs
- ✅ Easy to write and understand

```xpath
/FunctionDef/body//If[ancestor::If and not(parent::orelse)]
```
--> Matches function with double nested if


## Features
- ✨ Easy-to-configure, automated analysis of a Python program's abstract syntax tree
- 📃 Flexible and easy-to-use YAML-based configuration file for describing analyses and checks
- 🚀 Configurable saving of analysis results in the JSON, CSV, or SQLite formats
- 🌄 Interactive results analysis through the use of a locally running datasette server

## Comparison for Education & Research 

## Comparison for Education & Research

| **Feature**                | **Chasten**                           | **Ruff**                      | **Pylint**                   |
|----------------------------|----------------------------------------|-------------------------------|------------------------------|
| **Custom Rule Creation**   | ✅ Write in YAML with XPath — no coding | ❌ Hard-coded; not extensible | ⚠️ Requires Python plugin     |


## Comparison for Education & Research

| **Feature**                | **Chasten**                           | **Ruff**                      | **Pylint**                   |
|----------------------------|----------------------------------------|-------------------------------|------------------------------|
| **Learning AST Concepts**  | ✅ Transparent — great for teaching ASTs | ❌ Abstracted away             | ⚠️ Indirect via rule behavior |

## Comparison for Education & Research

| **Feature**                | **Chasten**                           | **Ruff**                      | **Pylint**                   |
|----------------------------|----------------------------------------|-------------------------------|------------------------------|
| **Research Use**           | ✅ Structured output + pattern mining  | ❌ Not suited for deep analysis | ⚠️ Output not researcher-friendly |

## Comparison for Education & Research

| **Feature**                | **Chasten**                           | **Ruff**                      | **Pylint**                   |
|----------------------------|----------------------------------------|-------------------------------|------------------------------|
| **Output Formats**         | ✅ JSON, CSV, SQLite (queryable)       | Text, JSON                    | Text, JSON                   |

## Comparison for Education & Research

| **Feature**                | **Chasten**                           | **Ruff**                      | **Pylint**                   |
|----------------------------|----------------------------------------|-------------------------------|------------------------------|
| **Interactive Exploration**| ✅ Datasette dashboards (SQLite-ready) | ❌ None                        | ❌ None                       |

## Chasten Workflow

## Key Takeaways


- ✅ **Declarative rule-writing with XPath**  
  Easily define grading criteria and static analysis checks — no need to write Python plugins.

- 🧠 **Teachable insights into code structure**  
  Helps students understand Abstract Syntax Trees (ASTs) and how code is interpreted structurally.

- 📊 **Structured, explorable outputs**  
  Export results to SQLite and use Datasette to visualize errors, coverage, and student patterns.

- 🧪 **Supports research and pedagogy**  
  Useful for analyzing coding behavior at scale, detecting common anti-patterns in student code.

- 📚 **Integrates into grading pipelines**  
  Run Chasten on student submissions to check for required docstrings, type hints, nested logic, etc.

