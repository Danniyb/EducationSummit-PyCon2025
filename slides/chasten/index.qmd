---
title: "Automated and Configurable Programming Project Checking with Chasten" 
date: "2025-05-15"
date-format: long
author: "Daniel Bekele, Jaclyn Pham, and Gregory M. Kapfhammer"
format: 
  revealjs:
    theme: default
    slide-number: true
    incremental: true
    code-fold: true
    code-tools: true
    code-link: true
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "PyCon Education Summit 2025"
    css: ../../css/styles.css
---

## What Problem Are We Solving?

::: {.incremental}

- Students struggle to write **efficient, readable code**
- Instructors spend hours **manually reviewing submissions** for structural issues
- Existing tools focus on **style**, not **semantic structure**
- Regex is **brittle**, and AST tools are **hard to prototype**

:::

::: {.fragment .fade .boxed-content style="margin-top: -0.05em; font-size: 0.9em;"}

{{< iconify fa6-solid lightbulb >}} **Ultimate Goal**: Enable **scalable** and
**structure-aware** feedback that support both instructors and students

:::


## The Instructor is teaching O(n²)
::: {.columns}
::: {.column width="50%"}

```python
# GOOD
seen = set()
for item in items:
    if item in seen:
        return True
    seen.add(item)
```
:::

::: {.column width="50%"}

```python
# BAD (O(n²))
for i in range(len(items)):
    for j in range(len(items)):
        if i != j 
          and items[i] == items[j]:
            return True
```
:::

:::

::: {.fragment .fade .boxed-content style="font-size: 0.8em;"}
{{< iconify mdi:alert-outline >}} Challenge: Ruff & Pylint can’t detect nested control structures like these
:::

::: {.fragment .fade style="font-size: 2em;"}

{{< iconify anxious-face-with-sweat >}}
Oh no! Instructor is sad!
:::

## Chasten to the Rescue
::: {.incremental}

- {{< iconify mdi:search-code >}} Uses XPath to search Python's AST

- {{< iconify mdi:file-code-outline >}} Rules written in simple YAML

- {{< iconify mdi:file-tree-outline >}} Structure-first, not just style

- {{< iconify mdi:database-outline >}} Outputs to JSON, CSV, or SQLite

:::

::: {.fragment .fade .boxed-content style="font-size: 1em;"}
{{< iconify fa6-solid lightbulb >}} Result: Instructors define checks once and apply them at scale across all submissions
:::

:::fragment
```yaml
- name: "nested-loops"
  code: "PERF001"
  pattern: "//For[descendant::For]"
  description: "Detects doubly nested for-loops (e.g. O(n²))"
```
:::

## Let's run Chasten!
::: {.fragment .fade style="font-size: 0.8em;"}
### Installation
```bash
pipx install chasten
pipx list  # Confirm installation
chasten --help  # View available commands
```
:::

::: {.fragment .fade style="font-size: 0.8em;"}
### Run Chasten
```bash
chasten analyze lazytracker \
        --config chasten-configuration \
        --search-path lazytracker \
        --save-directory dummy \
        --save
```
:::


## The Result

::: {.fragment .fade style="font-size: 0.8em;"}
### Nested-loop
| Check ID | Check Name     | File           | Matches |
|----------|----------------|----------------|---------|
| PERF001  | nested-loops   | lazytracker.py | 1       |
| PERF001  | nested-loops   | tracked.py     | 7       |
:::

::: {.fragment .fade style="font-size: 0.8em;"}
### Function Without Docstring
| Check ID | Check Name                            | File               | Matches |
|----------|----------------------------------------|--------------------|---------|
| FUNC003  | all-function-definition-with-no-docstring | test_lazytracker.py| 6       |
| FUNC003  | all-function-definition-with-no-docstring | test_tracked.py    | 2       |
| FUNC003  | all-function-definition-with-no-docstring | tracked.py         | 2       |
:::

::: {.fragment .fade style="font-size: 1em;"}
{{< iconify fluent-emoji:beaming-face-with-smiling-eyes >}}
Yay! The Instructor is happy!
:::

## Limitations & Future Directions
::: {.incremental}

- {{< iconify mdi:alert-circle-outline >}} Doesn’t handle style, formatting, or type inference

- {{< iconify mdi:timer-sand >}} Not optimized for high-speed CI use

- {{< iconify mdi:code-not-equal-variant >}} Doesn't enforce correctness — only pattern matches

:::

## Key Takeaways
::: {.incremental}

- {{< iconify mdi:pen >}} Write declarative rules for AST-based code checks

- {{< iconify mdi:school-outline >}} Enable automated grading that aligns with learning outcomes

- {{< iconify mdi:chart-bar-stacked >}} Generate data-rich insights into student code patterns

- {{< iconify mdi:email-check-outline >}} Focus on what the code does, not how it looks

:::

::: {.fragment .fade .boxed-content style="font-size: 0.85em;"}
{{< iconify fa6-solid lightbulb >}} Chasten fills the gap between manual review and traditional linters by putting structure-first education into your workflow.
:::

## Questions
Please don't hesitate to reach out to us at 



