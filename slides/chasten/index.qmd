---
title: "Automated and Configurable Programming Project Checking with Chasten"
subtitle: "Daniel Bekele & Chi (Jaclyn) Pham"
format: 
  revealjs:
    theme: default
    slide-number: true
    incremental: true
    code-fold: true
    code-tools: true
    code-link: true
    highlight-style: github
    footer: "Conference Presentations"
    css: ../../css/styles.css
---

## The Problem with Traditional Static Analysis

### Regular expression (regex) ‚â† code understanding
- Fails on structural nuance
- Hard to maintain across formatting/styles 

## The Problem with Traditional Static Analysis

### AST tools are powerful but complex
- Require managing node types
- Difficult to prototype new rules

## Chasten
A Python program that uses XPATH expressions to find patterns in the abstract syntax tree (AST) of a Python program

## What is an AST?

## Why XPATH?



## Features
- ‚ú® Easy-to-configure, automated analysis of a Python program's abstract syntax tree
- üìÉ Flexible and easy-to-use YAML-based configuration file for describing analyses and checks
- üöÄ Configurable saving of analysis results in the JSON, CSV, or SQLite formats
- üåÑ Interactive results analysis through the use of a locally running datasette server

## Comparison for Education & Research 

## Comparison for Education & Research

| **Feature**                | **Chasten**                           | **Ruff**                      | **Pylint**                   |
|----------------------------|----------------------------------------|-------------------------------|------------------------------|
| **Custom Rule Creation**   | ‚úÖ Write in YAML with XPath ‚Äî no coding | ‚ùå Hard-coded; not extensible | ‚ö†Ô∏è Requires Python plugin     |


## Comparison for Education & Research

| **Feature**                | **Chasten**                           | **Ruff**                      | **Pylint**                   |
|----------------------------|----------------------------------------|-------------------------------|------------------------------|
| **Learning AST Concepts**  | ‚úÖ Transparent ‚Äî great for teaching ASTs | ‚ùå Abstracted away             | ‚ö†Ô∏è Indirect via rule behavior |

## Comparison for Education & Research

| **Feature**                | **Chasten**                           | **Ruff**                      | **Pylint**                   |
|----------------------------|----------------------------------------|-------------------------------|------------------------------|
| **Research Use**           | ‚úÖ Structured output + pattern mining  | ‚ùå Not suited for deep analysis | ‚ö†Ô∏è Output not researcher-friendly |

## Comparison for Education & Research

| **Feature**                | **Chasten**                           | **Ruff**                      | **Pylint**                   |
|----------------------------|----------------------------------------|-------------------------------|------------------------------|
| **Output Formats**         | ‚úÖ JSON, CSV, SQLite (queryable)       | Text, JSON                    | Text, JSON                   |

## Comparison for Education & Research

| **Feature**                | **Chasten**                           | **Ruff**                      | **Pylint**                   |
|----------------------------|----------------------------------------|-------------------------------|------------------------------|
| **Interactive Exploration**| ‚úÖ Datasette dashboards (SQLite-ready) | ‚ùå None                        | ‚ùå None                       |

## Key Takeaways

- Learn how Chasten fits into a workflow for project-centric learning
- Create custom linting rules through a simple YAML configuration
- Practical examples of enforcing code standards on documentation and code
- Ways to analyze results through interactive dashboards with Datasette
- How to integrate Chasten into GitHub Classroom and GitHub Actions

## Introduction: The Problem with Static Analysis

- The limitations of regex for code analysis
- The complexity of traditional AST analysis frameworks
- What makes Chasten different: comparison to Ruff and Pylint

## Understanding AST Analysis

- What is an Abstract Syntax Tree (AST)
- XPath basics for programmers
- Using XPath to search the AST

## Getting Started with Chasten

- Installation and basic setup
- Understanding the configuration files
- Concrete examples of linting rules:
    - Finding missing docstrings
    - Detecting improper nesting of control structures
    - Enforcing type annotations
    - Identifying complex code patterns

## Analyzing Chasten's Results

- Saving and integrating results
- Using the Datasette dashboard
- Interpreting the findings

## Integration into Workflows

- Using Chasten in CI/CD pipelines
- Incorporating into development practices
- How to use Chasten for educational purposes
