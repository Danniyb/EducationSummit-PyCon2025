---
title: "Up and Running with GitHub, GitHub Classroom, and GitHub Actions"
subtitle: "Hemani Alaparthi and Gregory M. Kapfhammer"
format: 
  revealjs:
    theme: default
    slide-number: false
    incremental: true
    code-fold: true
    code-tools: true
    code-link: true
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "PyCon Education Summit 2025"
    css: ../../css/styles.css
    width: 1280
    height: 720
    code-block-font-size: 0.5em
---

## Traditional Assignment Challenges

::: {.fragment style="margin-top: -0.15em"}

- {{< iconify fa6-solid lightbulb >}} **Inefficient workflows lead to:**
  - Version chaos via email submissions
  - Time-consuming manual testing
  - Delayed feedback disconnected from code
  - Limited visibility into student progress
  - Unrealistic development practices

:::

::: {.fragment .fade .boxed-content style="margin-top: 0.25em; font-size: 0.8em;"}

{{< iconify fa6-solid microscope >}} How can we create a workflow that **automates repetitive tasks**, provides **immediate feedback**, and teaches **industry-standard practices**?

:::

## Enter GitHub, GitHub Classroom, and GitHub Actions

A complete ecosystem for programming education that:

- **Industry-standard tools** (Git, CI/CD, code review)
- **Good practices** (commit messages, branching, reviews)
- **Task automation** (testing, style checks, assignment distribution)
- **Immediate feedback** (pass/fail checks)
- **Student portfolios** (real-world projects)


## GitHub Classroom Benefits

:::: {.columns}

::: {.column width="48%"}
### For Students
- Professional version control
- Immediate feedback
- Clear guidance with TODOs
- Portfolio building
- Real development environment
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
### For Instructors
- Automated distribution
- Centralized collection
- Automated testing
- Progress visibility
- Consistent environments
:::

::::

::: {.fragment .fade .boxed-content style="margin-top: 0.5em; font-size: 0.8em;"}
{{< iconify fa6-solid star >}} **Summary:** GitHub Classroom bridges the gap between classroom learning and professional development while saving time for both students and instructors.
:::

## Implementation Workflow

:::: {.columns}

::: {.column width="50%" style="font-size: 0.8em;"}

### {{< iconify material-symbols:check-rounded >}} **Setup Repositories**  
- Write full solution with tests  
- Apply implementation ablation  
- Set up CI/CD pipeline  

:::

::: {.column width="50%" style="font-size: 0.8em;"}

### {{< iconify material-symbols:check-rounded >}} **Configure GitHub Classroom**  
- Link organization and repositories  
- Set deadlines and visibility  

:::

::::

:::: {.columns}

::: {.column width="50%" style="font-size: 0.8em;"}

### {{< iconify material-symbols:check-rounded >}} **Feedback & Assessment**  
- Track progress via GitHub insights  
- Targeted code reviews via pull requests  
- Assignment clarifications via issues  

:::

::: {.column width="50%" style="font-size: 0.8em;"}

### {{< iconify material-symbols:check-rounded >}} **Monitor Progress**  
- Automated test results (‚úÖ/‚ùå)  
- Detailed logs for error diagnosis  
- Student feedback and code review  

:::

::::

## Implementation Ablation

What is implementation ablation?

- Systematically remove implementation details from your solution
- Replace with well-documented TODOs
- Leave structure intact for students to complete
- Keep tests to guide students

## Example of Implementation Ablation

### Starter code with ablation

```python
# Starter code with ablation
def find_duplicates(input_list):
    # TODO: Use sets to track seen items and duplicates
    # Hint: You need to keep track of what you've seen so far
    seen = set()
    duplicates = set()
    
    for item in input_list:
        if item in seen:
            duplicates.add(item)
        else:
            seen.add(item)
    
    return list(duplicates)
```

## GitHub Actions Workflow Example

:::: {.columns}

::: {.column width="55%" style="font-size: 0.8em; float: left;"}

```yaml
name: Python Checks
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install pytest mypy ruff
    - name: Test with pytest
      run: pytest
```

:::

::: {.column width="40%" style="font-size: 0.8em; float: left;"}

- {{< iconify game-icons team-idea >}} **Tests run automatically** on each push
- ‚úÖ/‚ùå **Status checks** provide immediate feedback
- üõ†Ô∏è **Detailed logs** highlight errors for quick diagnosis

:::

::::

## Multi-level Feedback System

:::: {.columns}

::: {.column width="100%"}

::: {.fragment}
### Automated
:::

::: {.fragment}
- GitHub Actions test results (pass/fail status for each test)
- Code quality checks (PEP8 compliance with Ruff)
- Code coverage reports
:::

::: {.fragment}
### Manual
:::

::: {.fragment}
- In-line code comments (specific suggestions on implementation)
- Pull request reviews (comprehensive feedback on approach)
- Issue-based feedback (higher-level design discussions)
:::

:::

::::

## Integrating with External Tools

GitHub Actions can integrate with:

- Pytest for test coverage
- Ruff for style checking
- Chasten for AST-based pattern checking
- Custom grading tool such as ExecExam
- And many more!

::: {.fragment .fade .boxed-content style="margin-top: 0.5em; font-size: 0.9em;"}
{{< iconify fa6-solid puzzle-piece >}} **Integration Benefits**: Automated feedback fosters code quality, industry practices, and eases instructor workload.
:::

## Common Challenges and Solutions

::: {.fragment .fade style="margin-top: -0.5em; font-size: 1em;"}

{{< iconify fa6-solid rocket >}} **GitHub Classroom creates a realistic, automated workflow that benefits both students and instructors! But there are challenges:**
:::

::: {.fragment .fade style="margin-top: 0.5em; font-size: 0.8em; margin-bottom: 0.3em;"}

| Challenges | Solutions |
|-----------|----------|
| Git confusion | Provide cheat sheet and office hours |
| Merge conflicts | Teach basic conflict resolution |
| Test failures | Make test output student-friendly |
| Missing setup | Include detailed environment setup |
| Privacy concerns | Use private repositories |

:::

::: {.fragment .fade .boxed-content style="margin-top: 0.4em; font-size: 0.9em;"}
**Limitations:** There is a learning curve for Git and GitHub, initial setup time, internet access requirements, and organization permission management to consider.
:::

## Key Takeaways

::: {.fragment style="font-size: 0.9em;"}

- {{< iconify fa6-solid check-circle >}} **Streamlined workflow** from assignment creation to grading
- {{< iconify fa6-solid check-circle >}} **Industry-relevant skills** that benefit students beyond the classroom
- {{< iconify fa6-solid check-circle >}} **Automated testing** saves instructor time and provides immediate feedback
- {{< iconify fa6-solid check-circle >}} **Visible progress** through commit history helps with targeted interventions
- {{< iconify fa6-solid check-circle >}} **Reduced administrative overhead** through integrated tools and workflows

:::

::: {.fragment .fade .boxed-content style="margin-top: 0.5em; font-size: 0.9em;"}

{{< iconify fa6-solid comment >}} Thank You! Questions?
:::
