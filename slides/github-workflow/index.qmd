---
title: "Up and Running with GitHub, GitHub Classroom, and GitHub Actions"
subtitle: "Hemani Alaparthi and Gregory M. Kapfhammer"
format: 
  revealjs:
    theme: default
    slide-number: false
    incremental: true
    code-fold: true
    code-tools: true
    code-link: true
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "PyCon Education Summit 2025"
    css: ../../css/styles.css
    width: 1280
    height: 720
    code-block-font-size: 0.7em
---

# The Problem with Traditional Assignments

::: {.fragment style="margin-top: -0.15em; font-size: 0.6em;"}

- {{< iconify fa6-solid lightbulb >}} **Inefficient workflows lead to:**
  - Version chaos via email submissions
  - Time-consuming manual testing
  - Delayed feedback disconnected from code
  - Limited visibility into student progress
  - Unrealistic development practices

:::

::: {.fragment .fade .boxed-content style="margin-top: 0.25em; font-size: 0.8em;"}

{{< iconify fa6-solid microscope >}} How can we create a workflow that **automates repetitive tasks**, provides **immediate feedback**, and teaches **industry-standard practices**?

:::

## Enter GitHub, GitHub Classroom, and GitHub Actions

A complete ecosystem for programming education that:

- Leverages industry-standard tools
- Promotes good development practices
- Automates tedious tasks
- Provides immediate feedback
- Creates a portfolio for students

## GitHub Classroom Benefits

:::: {.columns}

::: {.column width="48%"}
### For Students
- Professional version control
- Immediate feedback
- Clear guidance with TODOs
- Portfolio building
- Real development environment
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
### For Instructors
- Automated distribution
- Centralized collection
- Automated testing
- Progress visibility
- Consistent environments
:::

::::

## Implementation Workflow

::: {.incremental style="margin-top: -0.15em; font-size: 0.95em;"}

- {{< iconify fa6-solid gear >}} **Create solution & starter repositories**
  - Write full solution with tests
  - Apply "implementation ablation"
  - Set up CI/CD pipeline
- {{< iconify fa6-solid gear >}} **Configure GitHub Classroom**
  - Link organization and repositories
  - Set deadlines and visibility
- {{< iconify fa6-solid lightbulb >}} **Monitor, provide feedback, assess**

:::


## Implementation Ablation

What is implementation ablation?

- Systematically remove implementation details from your solution
- Replace with well-documented TODOs
- Leave structure intact for students to complete
- Keep tests to guide students

## Example of Implementation Ablation

### Solution Code

```python
# Solution code
def find_duplicates(input_list):
    seen = set()
    duplicates = set()
    
    for item in input_list:
        if item in seen:
            duplicates.add(item)
        else:
            seen.add(item)
    
    return list(duplicates)
```
### Starter code with ablation

```python
def find_duplicates(input_list):
    # TODO: Use sets to track seen items and duplicates
    # Hint: You need to keep track of what you've seen so far
    
    # TODO: Check each item and update your tracking sets
    
    # TODO: Return the list of duplicates
    return []
```

## GitHub Actions Workflow Example

```yaml
name: Python Checks
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest mypy black
        if [ -f pyproject.toml ]; then pip install -e .; fi
    - name: Test with pytest
      run: pytest
```

::: {.fragment style="margin-top: 0.1em; font-size: 0.5em;"}

- {{< iconify game-icons team-idea >}} Tests run automatically on each push
- Status checks (✅/❌) provide immediate feedback
- Detailed logs show exactly what failed

:::

## Multi-level Feedback System

:::: {.columns}

::: {.column width="100%"}

### Automated

- GitHub Actions test results
- Code quality checks
- Code coverage reports

### Manual

- In-line code comments
- Pull request reviews
- Issue-based feedback

:::

::::


## Getting Started: Essential Steps

::: {style="font-size: 0.9em;"}

1. Create GitHub organization for your class
2. Design starter code through implementation ablation
3. Configure CI pipeline with appropriate tests
4. Create and distribute assignment links
5. Use GitHub's feedback tools effectively

:::

## Integrating with External Tools

GitHub Actions can integrate with:

- Pytest for test coverage
- Flake8/Pylint for style checking
- Chasten for AST-based pattern checking
- Custom grading tool such as ExecExam
- And many more!

## Common Challenges and Solutions

::: {.fragment .fade .boxed-content style="margin-top: 1em; font-size: 1em;"}

{{< iconify fa6-solid rocket >}} **GitHub Classroom creates a realistic, automated workflow that benefits both students and instructors!**
:::

::: {.fragment .fade .boxed-content style="margin-top: 1em; font-size: 1em;"}
**But there are challenges:**
:::

::: {.fragment .fade .boxed-content style="margin-top: 1em; font-size: 0.9em;"}

| Challenges | Solutions |
|-----------|----------|
| Git confusion | Provide cheat sheet and office hours |
| Merge conflicts | Teach basic conflict resolution |
| Test failures | Make test output student-friendly |
| Missing setup | Include detailed environment setup |
| Privacy concerns | Use private repositories |

::: 

## Limitations to Be Aware Of

- Learning curve for Git and GitHub
- Setup time for first assignments
- Need for internet access
- Managing organization permissions

## Questions?

::: {.fragment .fade .boxed-content style="margin-top: 1em; font-size: 2.1.8em;"}

{{< iconify fa6-solid comment >}} Thank you for your attention! We are happy to answer any questions you may have.

:::
